{{ $realmSecretName := printf "%s-realm" .Values.keycloak.name }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.keycloak.name }}
  labels:
  {{- include "h.labels" . | nindent 4 }}
data:
  host: {{ .Values.keycloak.name }}
  port: {{ .Values.keycloak.port | quote }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.keycloak.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "h.labels" . | nindent 4}}
type: Opaque
data:
  user: {{ .Values.keycloak.user | b64enc }}
  password: {{ include "h.password" (list .Values.keycloak.name "password" . .Values.keycloak.password (printf "A valid password for %s is required" .Values.keycloak.name)) }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $realmSecretName }}
data:
  oasis: |-
    {{- $userTemplate := .Files.Get "resources/oasis-realm-user.json" }}
    {{- $userJson := list -}}
    {{- $userJson = $userTemplate |
      replace "___UUID___" uuidv4 |
      replace "___USERNAME___" .Values.keycloak.oasisRestApi.platformServiceAccount.username |
      replace "___PASSWORD___" .Values.keycloak.oasisRestApi.platformServiceAccount.password |
      replace "___ROLES___" (join ", " (list "\"default-roles-oasis\"" "\"admin\"")) |
      replace "___GROUPS___" "" |
      append $userJson -}}
    {{- range $i, $user := .Values.keycloak.oasisRestApi.users }}
      {{- $groups := list }}
      {{- if $user.admin }}
        {{- $groups = append $groups "\"admin\"" }}
      {{- end }}
      {{- $userJson = $userTemplate |
        replace "___UUID___" uuidv4 |
        replace "___USERNAME___" $user.username |
        replace "___PASSWORD___" $user.password |
        replace "___ROLES___" "\"default-roles-oasis\"" |
        replace "___GROUPS___" (join ", " $groups ) |
        append $userJson -}}
    {{- end }}
    {{- .Files.Get "resources/oasis-realm.json" | replace "\"___USERS___\"" (join "," $userJson) | nindent 4 }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.keycloak.name }}
  labels:
    {{- include "h.labels" . | nindent 4 }}
spec:
  ports:
    - port: {{ .Values.keycloak.port }}
      targetPort: {{ .Values.keycloak.port }}
      protocol: TCP
      name: keycloak-http
  selector:
    {{- include "h.selectorLabels" . | nindent 4 }}
    app: {{ .Values.keycloak.name }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $realmSecretName }}
data:
  keycloak-cert: |
  -----BEGIN CERTIFICATE-----
MIIDrzCCApegAwIBAgIQCDvgVpBCRrGhdWrJWZHHSjANBgkqhkiG9w0BAQUFADBh
MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
d3cuZGlnaWNlcnQuY29tMSAwHgYDVQQDExdEaWdpQ2VydCBHbG9iYWwgUm9vdCBD
QTAeFw0wNjExMTAwMDAwMDBaFw0zMTExMTAwMDAwMDBaMGExCzAJBgNVBAYTAlVT
MRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5j
b20xIDAeBgNVBAMTF0RpZ2lDZXJ0IEdsb2JhbCBSb290IENBMIIBIjANBgkqhkiG
9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4jvhEXLeqKTTo1eqUKKPC3eQyaKl7hLOllsB
CSDMAZOnTjC3U/dDxGkAV53ijSLdhwZAAIEJzs4bg7/fzTtxRuLWZscFs3YnFo97
nh6Vfe63SKMI2tavegw5BmV/Sl0fvBf4q77uKNd0f3p4mVmFaG5cIzJLv07A6Fpt
43C/dxC//AH2hdmoRBBYMql1GNXRor5H4idq9Joz+EkIYIvUX7Q6hL+hqkpMfT7P
T19sdl6gSzeRntwi5m3OFBqOasv+zbMUZBfHWymeMr/y7vrTC0LUq7dBMtoM1O/4
gdW7jVg/tRvoSSiicNoxBN33shbyTApOB6jtSj1etX+jkMOvJwIDAQABo2MwYTAO
BgNVHQ8BAf8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUA95QNVbR
TLtm8KPiGxvDl7I90VUwHwYDVR0jBBgwFoAUA95QNVbRTLtm8KPiGxvDl7I90VUw
DQYJKoZIhvcNAQEFBQADggEBAMucN6pIExIK+t1EnE9SsPTfrgT1eXkIoyQY/Esr
hMAtudXH/vTBH1jLuG2cenTnmCmrEbXjcKChzUyImZOMkXDiqw8cvpOp/2PV5Adg
06O/nVsJ8dWO41P0jmP6P6fbtGbfYmbW0W5BjfIttep3Sp+dWOIrWcBAI+0tKIJF
PnlUkiaY4IBIqDfv8NZ5YBberOgOzW6sRBc4L0na4UU+Krk2U886UAb3LujEV0ls
YSEY1QSteDwsOoBrp+uvFRTp2InBuThs4pFsiv9kuXclVzDAGySj4dzp30d8tbQk
CAUw7C29C79Fv1C5qfPrmAESrciIxpg0X40KPMbp1ZWVbd4=
-----END CERTIFICATE-----

---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.keycloak.name }}-tester
  labels:
    {{- include "h.labels" . | nindent 4 }}
spec:
  ports:
    - port: {{ .Values.keycloak.port }}
      targetPort: {{ .Values.keycloak.port }}
      protocol: TCP
      name: keycloak-http
  selector:
    {{- include "h.selectorLabels" . | nindent 4 }}
    app: {{ .Values.keycloak.name }}
---
apiVersion: secrets-store.csi.x-k8s.io/v1alpha1
kind: SecretProviderClass
metadata:
  name: akv-provider
spec:
  provider: azure
  secretObjects: # Secrets to retrieve from Azure Key Vault
    - secretName: keycloak-secret
      type: kubernetes.io/basic-auth #Type of the secret
      data:
        - objectName: keycloak-cert
          key: username
  parameters:
    usePodIdentity: "false"
    useVMManagedIdentity: "true"
    userAssignedIdentityID: "azurekeyvaultsecretprovider-oasis-enterprise/subscriptions/da90aaa5-0e0f-4362-bb41-42887865d0f/resourceGroups/oasis-enterprise-dev-test-aks/providers/Microsoft.ManagedIdentity/userAssignedIdentities/azurekeyvaultsecretprovider-oasis-enterprise"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.keycloak.name }}
  labels:
    {{- include "h.labels" . | nindent 4}}
spec:
  selector:
    matchLabels:
      app: {{ .Values.keycloak.name }}
  replicas: 1
  template:
    metadata:
      labels:
        {{- include "h.labels" . | nindent 8 }}
        app: {{ .Values.keycloak.name }}
      annotations:
        checksum/{{ .Values.databases.keycloak_db.name }}: {{ toJson .Values.databases.keycloak_db | sha256sum }}
        checksum/realm: {{ .Files.Get "resources/oasis-realm.json" | sha256sum }}
    spec:
      {{- include "h.affinity" . | nindent 6 }}
      initContainers:
        {{- include "h.initTcpAvailabilityCheckBySecret" (list . .Values.databases.keycloak_db.name) | nindent 8}}
      containers:
        - name: {{ .Values.keycloak.name }}
          image: {{ .Values.images.keycloak.image }}:{{ .Values.images.keycloak.version }}
          args: ["start", "--import-realm"]
          ports:
            - containerPort: {{ .Values.keycloak.port }}
          env:
            - name: KC_LOGLEVEL
              value: DEBUG
            - name: PROXY_ADDRESS_FORWARDING
              value: "true"
            - name: KC_PROXY
              value: "edge"
            - name: KC_IMPORT
              value: "/opt/keycloak/data/import/oasis-realm.json"
            - name: KC_HTTP_RELATIVE_PATH
              value: "/auth"
            - name: KC_HOSTNAME_STRICT
              value: "false"
            - name: KC_PROXY_ADDRESS_FORWARDING
              value: "true"
            - name: KC_DB
              {{- if eq .Values.databases.keycloak_db.type "mysql" }}
              value: mysql
              {{- else }}
              value: postgres
              {{- end }}
            - name: KC_DB_URL_HOST
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.databases.keycloak_db.name }}
                  key: host
            - name: KC_DB_URL_PORT
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.databases.keycloak_db.name }}
                  key: port
            - name: KC_DB_URL_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.databases.keycloak_db.name }}
                  key: dbName
            - name: KC_DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.databases.keycloak_db.name }}
                  key: user
            - name: KC_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.databases.keycloak_db.name }}
                  key: password
            - name: KEYCLOAK_ADMIN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.keycloak.name }}
                  key: user
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.keycloak.name }}
                  key: password
          startupProbe:
            httpGet:
              path: /auth/realms/master
              port: 8080
            timeoutSeconds: 5
            periodSeconds: 10
            failureThreshold: 30
          livenessProbe:
            httpGet:
              path: /auth/
              port: 8080
            initialDelaySeconds: 300
            periodSeconds: 15
            timeoutSeconds: 10
            failureThreshold: 2
          volumeMounts:
            - name: keycloak-cert
              mountPath: /opt/keycloak/data/import/oasis-realm.json
              subPath: file-postgres-cert
            - name: realm-config
              mountPath: /opt/keycloak/.postgresql/root.crt
              subPath: oasis

      volumes:
        - name: keycloak-cert
          configMap:
            name: {{ $realmSecretName }}
{{- if (.Values.azure).secretProvider }}
        - name: secrets-store
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "azure-secret-provider"
{{- end }}
        - name: realm-config
          configMap:
            name: {{ $realmSecretName }}
{{- if (.Values.azure).secretProvider }}
        - name: azure-secret-provider
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "azure-secret-provider"
{{- end }}
